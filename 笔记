-------------------------------------------------------------------以下为基础配置
1.
npm i -D webpack webpack-cli
2.
npm i -D path
3.
构建项目文件结构
|- /dist
  |- bundle.js
|- /node_modules
|- /src
  |- index.js
|- index.html
|- package-lock.json
|- package.json
|- README.md
|- webpack.config.js

4.
配置webpack.config.js

5.
在package.json配置一个 npm 脚本(npm script)，用于运行webpack，通过 npm run build 运行webpack进行打包
"scripts": {
    "build": "webpack"
},


6.
配置.gitignore文件取消上传node_modiles文件夹，

配置如下：
node_modules/

如果不取消上传node_modiles文件过大，到时下载项目时很麻烦
忽略后，如果是第一次构建，只需运行npm i  就可以安装对应的依赖包






----------------------------------------------------------------------以下为各个loader配置
以下出现找不到module就试试重装，有时安装完一个包另一个用不了可能有损坏，重装可能就好了,特别是sass-loader总出现这个问题---------特别注意


1.babel配置（加载 ES2015+ 代码，然后使用 Babel 转译为 ES5）,看官方文档
查看安装版本可以看package.json文件
出现找不到对应插件的情况可能是版本问题
例如出现找不到  @babel/plugin-*  插件说明安装错了或者没安装，要重新安装成   @babel/plugin-*
例如把babel-plugin-*卸载，重新安装@babel/plugin-*

本次就出现找不到@babel/plugin-transform-runtime
原因是安装的是 babel-plugin-transform-runtime
需要通过 卸载 npm un babel-plugin-transform-runtime  
        安装 npm i @babel/plugin-transform-runtime  
解决

查看配置是否成功可以打开IE测试es6语法

webpack.config.js中配置
{
    test: /\.js$/,
    exclude: /(node_modules|bower_components)/,
    use:  "babel-loader"
}

.babelrc 中配置
{
  "presets": [
    "@babel/preset-env"
  ],
  "plugins": [
    "@babel/transform-runtime"
  ]
}



2.
配置file-loader
第一步：npm install file-loader -D
第二步：配置webpack.config.js
配置加载图片文件
{ test: /\.(png|jpg|gif)$/, use: "file-loader" },

配置加载字体文件,注意输出路径专门放到一个fonts文件夹
{
  test: /\.(woff|woff2|eot|ttf|otf)$/,
  use: { loader: "file-loader", options: { outputPath: "../fonts" } }
},


3.
style-loader  css-loader配置
第一步：npm i style-loader css-loader -D
第二步：配置webpack.config.js

出现了报错 ，但是后面配完file-loader就好了，但是即使卸载file-loader也可以运行，大概率是webpack.config.js的rules写错



4.less-loader less 配置
第一步：npm install -D less-loader less
第二步：配置webpack.config.js



5.scss 配置
第一步：cnpm install -D sass-loader node-sass
用npm下载会报错，要用cnpm下载

第二步：配置webpack.config.js
注意是 /\.scss$/  不要配成 /\.sass$/





6.
vue配置
第一步：
npm i -S vue
npm i -S vue-router
npm i -D vue-html-loader
npm i -D vue-style-loader
npm i -D vue-loader
npm i -D vue-template-compiler

第二步：
配置webpack
//  使用vue-loader 加载 .vue 结尾的文件
  {
    test: /\.vue$/, 
    loader: 'vue-loader',
    exclude: /node_modules/    
  },

v15版的vue-loader配置需要加个VueLoaderPlugin
否则会报错vue-loader was used without the corresponding plugin. Make sure to include VueLoaderPlugin in your webpack config.

解决方案1：把vue-loader回到v14版本
npm uninstall vue-loader
npm install vue-leader@14.2.2

解决方案2：修改webpack.config.js
const VueLoaderPlugin = require("vue-loader/lib/plugin");
plugins: [
    new VueLoaderPlugin()
]



配置vue-resource
第一步：npm i -S vue-resource
第二步：配置vue-resource文件，并导入index.js


7.
配置element-ui按需导入


第一步：
借助 babel-plugin-component，我们可以只引入需要的组件，以达到减小项目体积的目的。
npm i -S element-ui
npm install babel-plugin-component -D

第二步：
.babelrc 修改为
{
  "presets": [["es2015", { "modules": false }]],
  "plugins": [
    [
      "component",
      {
        "libraryName": "element-ui",
        "styleLibraryName": "theme-chalk"
      }
    ]
  ]
}


注意：element-ui中有字体文件等，需要先配置file-loader加载字体文件




---------------------------------------------------------------------------插件配置
1.
HtmlWebpackPlugin插件（自动生成一个引用bundle.js的html文件）
第一步：npm install --save-dev html-webpack-plugin
第二步：配置webpack.config.js添加插件
const HTMLWebpackPlugin = require('html-webpack-plugin');

//template模板，filename输出文件名字
plugins: [new HTMLWebpackPlugin({ template: 'index.html', filename: 'index.html' })]



--------------------------------------------------------------------------------------------------------------------------
热更新配置
第一步：npm i -D webapck-dev-server
第二步：配置webpack.config.js
devServer: {
    port: 8080,   //  端口
    open: true    //  自动打开
  }
第三步：配置package.json
"scripts": {
    "build": "webpack-dev-server"
  }

webapck-dev-server常用的配置属性
devServer: {
    contentBase: "./",//本地服务器所加载的页面所在的目录
    historyApiFallback: true,//不跳转
    host:'0.0.0.0',  //设置为ip地址,手机连接到同一个wifi可以通过这个地址访问,本机ip地址可以通过cmd 的 ipconfig获得
    port:7000,
    hot:true,
    inline: true,//实时刷新
    hot:true,//Enable webpack's Hot Module Replacement feature
    compress:true,//Enable gzip compression for everything served
    overlay: true, //Shows a full-screen overlay in the browser
    stats: "errors-only" ,//To show only errors in your bundle
    open:true, //When open is enabled, the dev server will open the browser.
    proxy: {
        "/api": {
            target: "http://localhost:3000",
            pathRewrite: {"^/api" : ""}
        }
    }，//重定向
 }






